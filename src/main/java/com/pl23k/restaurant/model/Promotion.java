package com.pl23k.restaurant.model;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.TableMapping;
import com.pl23k.restaurant.model.base.BasePromotion;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Promotion extends BasePromotion<Promotion> {
	public static final Promotion dao = new Promotion().dao();
	public static final String tableName = TableMapping.me().getTable(Promotion.class).getName();
	public static int mPageSize = 10;


	public static  Promotion getPromotionById(Integer id){
		Promotion promotion = null;
		try{
			promotion = dao.findById(id);
		}catch (Exception e){
			e.printStackTrace();
		}
		return promotion;
	}

	/**
	 * 分页取出活动信息
	 * @param pageNumber
	 * @return
	 */
	public static Page<Promotion> getPromotionByPage(int pageNumber){
		Page<Promotion> page = null;
		try {
			page = dao.paginate(pageNumber, mPageSize, "select * ", String.format("from %s order by id desc", tableName));
		}catch (Exception e){
			e.printStackTrace();
		}
		return page;
	}

	/**
	 * 取出所有活动
	 * @param isActive true：只取true的   false：全部取出
	 * @return
	 */
	public static List<Promotion> getPromotionList(Boolean isActive){
		List<Promotion> list = null;
		try {
			if(isActive){
				list = dao.find(String.format("select * from %s where isActive=1 order by sort",tableName));
			}else{
				list = dao.find(String.format("select * from %s order by sort",tableName));
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return list;
	}

	/**
	 * 获取充值活动名称
	 * @param id
	 * @return
	 */
	public static String getPromotionNameById(Integer id){
		String name = null;
		try{
			Promotion promotion = Promotion.getPromotionById(id);
			if(promotion!=null){
				name = promotion.getName();
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return name;
	}

	/**
	 * 获取活动2充值订单
	 * @return
	 */
	public static List<Map<String,Object>> getPromotion2List(){
		List<Map<String,Object>> rechargeList = null;
		try{
			Promotion promotion = Promotion.getPromotionById(1);
			if(promotion!=null){
				JSONArray jsonArray = JSON.parseArray(promotion.getRule());
				if(jsonArray!=null){
					rechargeList = new ArrayList<>();
					for(int i=0;i<jsonArray.size();i++){
						JSONObject jsonObject = jsonArray.getJSONObject(i);
						Map<String,Object> item = new HashMap<>();
						item.put("id",jsonObject.get("id"));
						item.put("充值",jsonObject.get("充值"));
						item.put("返现时间",jsonObject.get("返现时间"));
						item.put("返现金额",jsonObject.get("返现金额"));
						rechargeList.add(item);
					}
				}
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return rechargeList;
	}

	/**
	 * 通过ID获取活动2充值项
	 * @param id
	 * @return
	 */
	public static Map<String,Object> getPromotion2ItemById(Integer id){
		List<Map<String,Object>> rechargeList = getPromotion2List();
		Map<String,Object> item = null;
		try{
			if(rechargeList!=null){
				for(Map<String,Object> recharge : rechargeList){
					if(id.equals(recharge.get("id"))){
						item = recharge;
						break;
					}
				}
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return item;
	}

	/**
	 * 通过Money获取活动2充值项
	 * @param money
	 * @return
	 */
	public static Map<String,Object> getPromotion2ItemByMoney(BigDecimal money){
		List<Map<String,Object>> rechargeList = getPromotion2List();
		Map<String,Object> item = null;
		try{
			if(rechargeList!=null){
				for(Map<String,Object> recharge : rechargeList){
					if(money.compareTo(new BigDecimal((String)recharge.get("充值"))) == 0){
						item = recharge;
						break;
					}
				}
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return item;
	}
}
