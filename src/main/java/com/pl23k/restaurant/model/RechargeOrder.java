package com.pl23k.restaurant.model;

import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.TableMapping;
import com.pl23k.restaurant.model.base.BaseRechargeOrder;
import com.pl23k.restaurant.utils.DateUtil;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class RechargeOrder extends BaseRechargeOrder<RechargeOrder> {
	public static final RechargeOrder dao = new RechargeOrder().dao();
	public static final String tableName = TableMapping.me().getTable(RechargeOrder.class).getName();
	public static int mPageSize = 10;

	/**
	 * 通过订单号获取订单
	 * @param orderId
	 * @return
	 */
	public static RechargeOrder getRecordByOrderId(String orderId){
		RechargeOrder record = null;
		try{
			record = dao.findFirst(String.format("select * from %s where orderId=?",tableName),orderId);
		}catch (Exception e){
			e.printStackTrace();
		}
		return record;
	}

	/**
	 * 通过预付码获取订单
	 * @param prepayId
	 * @return
	 */
	public static RechargeOrder getRecordByPrepayId(String prepayId){
		RechargeOrder record = null;
		try{
			if(StrKit.notBlank(prepayId)){
				record = dao.findFirst(String.format("select * from %s where prepayId=?",tableName),prepayId);
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return record;
	}

	/**
	 * 通过ID获取记录
	 * @param id
	 * @return
	 */
	public static RechargeOrder getRecordById(Integer id){
		RechargeOrder record = null;
		try{
			record = dao.findById(id);
		}catch (Exception e){
			e.printStackTrace();
		}
		return record;
	}

	/**
	 * 分页取出记录
	 * @param pageNumber
	 * @return
	 */
	public static Page<RechargeOrder> getRecordByPage(int pageNumber){
		Page<RechargeOrder> page = null;
		try {
			page = dao.paginate(pageNumber, mPageSize, "select * ", String.format("from %s order by id desc", tableName));
		}catch (Exception e){
			e.printStackTrace();
		}
		return page;
	}

	/**
	 * 分页取出记录
	 * @param pageNumber
	 * @param workerId
	 * @return
	 */
	public static Page<RechargeOrder> getRecordByPageWorkerId(int pageNumber,Integer workerId){
		Page<RechargeOrder> page = null;
		try {
			page = dao.paginate(pageNumber, mPageSize, "select * ", String.format("from %s where recommendType=3 and recommendId=? order by id desc", tableName),workerId);
		}catch (Exception e){
			e.printStackTrace();
		}
		return page;
	}

	/**
	 * 分页查询记录列表
	 *
	 * @param pageNumber
	 * @param searchType 1、按充值者用户名
	 * @param searchKey
	 * @param startTime
	 * @param endTime
	 * @return
	 */
	public static Page<RechargeOrder> searchRecordByPage(Integer pageNumber,Integer searchType, String searchKey, String startTime, String endTime) {
		Page<RechargeOrder> page = null;
		try {
			if(pageNumber==null || pageNumber<1) pageNumber=1;
			String where;
			if(searchType == null) searchType = 1;
			if(StrKit.isBlank(searchKey)){
				where = String.format("from %s where id > 0 ", tableName);
			}else{
				if(searchType == 1){
					where = String.format("from %s where remark like '%%%s%%' ", tableName, searchKey);
				}else{
					where = String.format("from %s where  id>0 ", tableName);
				}
			}

			if (startTime != null && !startTime.equals("") && endTime != null && !endTime.equals("")) {
				where = String.format("%s and (addTime between '%s' and '%s')", where, startTime.replace('_', '-'), endTime.replace('_', '-'));
			}

			where = String.format("%s order by id desc", where);
			page = dao.paginate(pageNumber, mPageSize, "select * ", where);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return page;
	}

	/**
	 * 获取充值者姓名
	 * @return
	 */
	public String getMemberRealName(){
		return User.getRealNameByMemberId(getMemberId());
	}

	public String getMemberUsername(){
		return User.getUsernameByMemberId(getMemberId());
	}

	/**
	 * 获取充值类型名称
	 * @return
	 */
	public String getTypeName(){
		String name = null;
		switch (getPayType()){
			case 0:{
				name = "后台充值";
				break;
			}
			case 1:{
				name = "代理充值";
				break;
			}
			case 2:{
				name = "支付宝";
				break;
			}
			case 3:{
				name = "微信";
				break;
			}
			case 4:{
				name = "网银";
				break;
			}
			case 5:{
				name = "其他";
				break;
			}
		}
		return name;
	}

	/**
	 * 获取店铺名称
	 * @return
	 */
	public String getShopName(){
		return Shop.getShopNameById(getShopId());
	}

	/**
	 * 获取充值活动名称
	 * @return
	 */
	public String  getPromotionName(){
		return Promotion.getPromotionNameById(getPromotion());
	}

	public String getRecommendText(){
		String name = null;
		if(getRecommendType() == 0){
			name = getMemberRealName()+"[自行充值]";
		}else if(getRecommendType()==1){
			Admin admin = Admin.getAdminById(getRecommendId());
			name = admin==null?"未知":admin.getRealName();
			name += "[管理员充值]";
		}else if(getRecommendType()==2){
			Admin admin = Admin.getAdminById(getRecommendId());
			name =  admin==null?"未知":admin.getRealName();
			Shop shop = Shop.getShopById(getShopId());
			name += "["+(shop==null?"未知店铺":shop.getName())+"管理员推荐]";
		}else if(getRecommendType()==3){
			Worker worker = Worker.getRecordById(getRecommendId());
			name =  worker==null?"未知":worker.getRealName();
			Shop shop = Shop.getShopById(getShopId());
			name += "["+(shop==null?"未知店铺":shop.getName())+"店员推荐]";
		}else if(getRecommendType()==4){
			User user = User.getRecordById(getRecommendId());
			name =  user==null?"未知":user.getRealName();
			name += "[用户推荐]";
		}
		return name;
	}

	/**
	 * 获取充值总额
	 * @return
	 */
	public static BigDecimal getRechargeTotal(){
		BigDecimal total = null;
		try{
			Record record = Db.findFirst(String.format("select sum(money) as total from %s where status>1",tableName));
			if(record!=null && record.get("total")!=null){
				total = record.getBigDecimal("total");
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return total;
	}

	/**
	 * 获取充值总额
	 * @param workerId
	 * @return
	 */
	public static BigDecimal getRechargeTotalByWorkerId(Integer workerId){
		BigDecimal total = null;
		try{
			Record record = Db.findFirst(String.format("select sum(money) as total from %s where status>1 and recommendType=3 and recommendId=?",tableName),workerId);
			if(record!=null && record.get("total")!=null){
				total = record.getBigDecimal("total");
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return total;
	}

	/**
	 * 获取实际到账充值总额
	 * @return
	 */
	public static BigDecimal getRechargeTotalReal(){
		BigDecimal total = null;
		try{
			Record record = Db.findFirst(String.format("select sum(payMoney) as total from %s where status>1",tableName));
			if(record!=null && record.get("total")!=null){
				total = record.getBigDecimal("total");
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return total;
	}

	/**
	 * 获取今日充值总额
	 * @return
	 */
	public static BigDecimal getRechargeTodayTotal(){
		BigDecimal total = null;
		try{
			Record record = Db.findFirst(String.format("select sum(money) as total from %s where status>1 and to_days(addTime)=to_days(now())",tableName));
			if(record!=null && record.get("total")!=null){
				total = record.getBigDecimal("total");
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return total;
	}

	/**
	 * 获取今日充值总额
	 * @param workerId
	 * @return
	 */
	public static BigDecimal getRechargeTodayTotalByWorkerId(Integer workerId){
		BigDecimal total = null;
		try{
			Record record = Db.findFirst(String.format("select sum(money) as total from %s where status>1 and recommendType=3 and recommendId=? and to_days(addTime)=to_days(now())",tableName),workerId);
			if(record!=null && record.get("total")!=null){
				total = record.getBigDecimal("total");
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return total;
	}

	/**
	 * 获取今日充值总额
	 * @param workerId
	 * @return
	 */
	public static BigDecimal getTotalRoyaltyByWorkerId(Integer workerId){
		BigDecimal total = null;
		try{
			Record record = Db.findFirst(String.format("select sum(royalty) as total from %s where status>1 and recommendType=3 and recommendId=?",tableName),workerId);
			if(record!=null && record.get("total")!=null){
				total = record.getBigDecimal("total");
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return total;
	}

	/**
	 * 获取今日实际充值总额
	 * @return
	 */
	public static BigDecimal getRechargeTodayTotalReal(){
		BigDecimal total = null;
		try{
			Record record = Db.findFirst(String.format("select sum(payMoney) as total from %s where status>1 and to_days(addTime)=to_days(now())",tableName));
			if(record!=null && record.get("total")!=null){
				total = record.getBigDecimal("total");
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return total;
	}

	/**
	 * 通过用户ID获取最近一条有shopid的充值记录
	 * @param memberId
	 * @return
	 */
	public static RechargeOrder getLastShopRechargeByMemberId(String memberId){
		RechargeOrder rechargeOrder = null;
		try{
			rechargeOrder = dao.findFirst(String.format("select * from %s where memberId=? and shopId>0 order by addTime desc",tableName),memberId);
		}catch (Exception e){
			e.printStackTrace();
		}
		return rechargeOrder;
	}

	/**
	 * 通过用户ID获取用户充值记录
	 * @param memberId
	 * @return
	 */
	public static List<RechargeOrder> getRechargesByMemberId(String memberId){
		List<RechargeOrder> rechargeOrders = null;
		try{
			rechargeOrders = dao.find(String.format("select * from %s where memberId=? order by addTime desc",tableName),memberId);
		}catch (Exception e){
			e.printStackTrace();
		}
		return rechargeOrders;
	}

	/**
	 * 是否参加过活动
	 * @param id 活动ID
	 * @param memberId
	 * @return
	 */
	public static Boolean hasP(Integer id, String memberId){
		Boolean ret = false;
		try{
			RechargeOrder record = dao.findFirst(String.format("Select * from %s where status>1 and memberId=? and promotion=?",tableName),memberId,id);
			if(record!=null){
				ret = true;
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return ret;
	}

	/**
	 * 获取待入账金额
	 * @param memberId
	 * @return
	 */
	public static BigDecimal getWaitMoneyByMemberId(String memberId){
		BigDecimal total = null;
		try{
			Record record = Db.findFirst(String.format("select sum(returnMoney) as total from %s where status>1 and isPayPromotion=0 and memberId=?",tableName),memberId);
			if(record!=null && record.get("total")!=null){
				total = record.getBigDecimal("total");
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return total;
	}

	/**
	 * 获取未返现订单
	 * @return
	 */
	public static List<RechargeOrder> getUnReturnRechargeOrder(){
		List<RechargeOrder> rechargeOrders = null;
		try{
			rechargeOrders = dao.find(String.format("select * from %s where status>1 and isPayPromotion=0",tableName));
		}catch (Exception e){
			e.printStackTrace();
		}
		return rechargeOrders;
	}

	/**
	 * 获取上周充值数据
	 * @return
	 */
	public static List<BigDecimal> getLastWeekRecharges(){
		List<BigDecimal> list = new ArrayList<>();
		try{
			Calendar calendar = Calendar.getInstance();
			calendar.setTime(new Date());
			int week = calendar.get(Calendar.DAY_OF_WEEK)-1; //1星期日   7星期六
			if(week == 0) week=7;
			for(int i=0;i<7;i++){//周一~周日
				BigDecimal total = BigDecimal.ZERO;
				Calendar calendar2 = Calendar.getInstance();
				calendar2.setTime(calendar.getTime());
				calendar2.add(Calendar.DAY_OF_YEAR,-(6+week-i));
				//System.out.println("上周:"+DateUtil.formatDateTime(calendar2.getTime()));
				Record record = Db.findFirst(String.format("select sum(payMoney) as total from %s where status>1 and to_days(addTime)=to_days(?)",
						tableName), DateUtil.formatDateTime(calendar2.getTime()));
				if(record!=null && record.get("total")!=null){
					total = record.getBigDecimal("total");
				}
				list.add(total);
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return list;
	}

	/**
	 * 获取本周充值数据
	 * @return
	 */
	public static List<BigDecimal> getThisWeekRecharges(){
		List<BigDecimal> list = new ArrayList<>();
		try{
			Calendar calendar = Calendar.getInstance();
			calendar.setTime(new Date());
			int week = calendar.get(Calendar.DAY_OF_WEEK)-1; //1星期日   7星期六
			if(week == 0) week=7;
			for(int i=1;i<=week;i++){//周一~周日
				BigDecimal total = BigDecimal.ZERO;
				Calendar calendar2 = Calendar.getInstance();
				calendar2.setTime(calendar.getTime());
				calendar2.add(Calendar.DAY_OF_YEAR,-week+i);
				//System.out.println("本周:"+DateUtil.formatDateTime(calendar2.getTime()));
				Record record = Db.findFirst(String.format("select sum(payMoney) as total from %s where status>1 and to_days(addTime)=to_days(?)",
						tableName), DateUtil.formatDateTime(calendar2.getTime()));
				if(record!=null && record.get("total")!=null){
					total = record.getBigDecimal("total");
				}
				list.add(total);
			}
			for(int i=week;i<=7;i++){
				list.add(BigDecimal.ZERO);
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return list;
	}
}
