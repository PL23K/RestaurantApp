package com.pl23k.restaurant.model;

import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.TableMapping;
import com.pl23k.restaurant.model.base.BaseUser;
import com.pl23k.restaurant.utils.DateUtil;

import java.math.BigDecimal;
import java.util.Date;
import java.util.Random;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class User extends BaseUser<User> {
	public static final User dao = new User().dao();
	public static final String tableName = TableMapping.me().getTable(User.class).getName();
	public static int mPageSize = 10;

	/**
	 * 通过ID获取记录
	 * @param id
	 * @return
	 */
	public static User getRecordById(Integer id){
		User record = null;
		try{
			record = dao.findById(id);
		}catch (Exception e){
			e.printStackTrace();
		}
		return record;
	}

	/**
	 * 通过用户名获取用户
	 * @param username
	 * @return
	 */
	public static User getRecordByUsername(String username){
		User record = null;
		try{
			record = dao.findFirst(String.format("select * from %s where username=?",tableName),username);
		}catch (Exception e){
			e.printStackTrace();
		}
		return record;
	}

	/**
	 * 通过用户ID获取用户
	 * @param memberId
	 * @return
	 */
	public static User getRecordByMemberId(String memberId){
		User record = null;
		try{
			record = dao.findFirst(String.format("select * from %s where memberId=?",tableName),memberId);
		}catch (Exception e ){
			e.printStackTrace();
		}
		return record;
	}

	/**
	 * 分页取出记录
	 * @param pageNumber
	 * @return
	 */
	public static Page<User> getRecordByPage(int pageNumber){
		Page<User> page = null;
		try {
			page = dao.paginate(pageNumber, mPageSize, "select * ", String.format("from %s order by id desc", tableName));
		}catch (Exception e){
			e.printStackTrace();
		}
		return page;
	}

	/**
	 * 分页查询记录列表
	 *
	 * @param pageNumber
	 * @param searchType 1、按用户名搜索  2、按昵称搜索
	 * @param searchKey
	 * @param startTime
	 * @param endTime
	 * @return
	 */
	public static Page<User> searchRecordByPage(Integer pageNumber,Integer searchType, String searchKey, String startTime, String endTime) {
		Page<User> page = null;
		try {
			if(pageNumber==null || pageNumber<1) pageNumber=1;
			String where;
			if(searchType == null) searchType = 1;
			if(searchKey == null){
				where = String.format("from %s where id > 0 ", tableName);
			}else{
				if(searchType == 1){
					where = String.format("from %s where username like '%%%s%%' ", tableName, searchKey);
				}else if(searchType == 2){
					where = String.format("from %s where realName like '%%%s%%' ", tableName, searchKey);
				}else{
					where = String.format("from %s where  id>0 ", tableName);
				}
			}

			if (startTime != null && !startTime.equals("") && endTime != null && !endTime.equals("")) {
				where = String.format("%s and (addTime between '%s' and '%s')", where, startTime.replace('_', '-'), endTime.replace('_', '-'));
			}

			where = String.format("%s order by id desc", where);
			page = dao.paginate(pageNumber, mPageSize, "select * ", where);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return page;
	}

	/**
	 * 获取等级名称
	 * @return
	 */
	public String getLevelName(){
		return UserLevel.getLevelNameById(getLevel());
	}

	/**
	 * 判断是否今日新增
	 *
	 * @return
	 */
	public boolean isNew() {
		boolean ret = false;
		try {
			if (getAddTime().after(DateUtil.formatStringDate(DateUtil.getTimeStart(DateUtil.formatDateTime(new Date()))))) {
				ret = true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return ret;
	}

	/**
	 * 通过MEMBERID获取姓名
	 * @param memberId
	 * @return
	 */
	public static String getRealNameByMemberId(String memberId){
		String name = null;
		try{
			User user = dao.findFirst(String.format("select * from %s where memberId=?",tableName),memberId);
			if(user!=null){
				name = user.getRealName();
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return name;
	}

	/**
	 * 通过MEMBERID获取用户名
	 * @param memberId
	 * @return
	 */
	public static String getUsernameByMemberId(String memberId){
		String name = null;
		try{
			User user = dao.findFirst(String.format("select * from %s where memberId=?",tableName),memberId);
			if(user!=null){
				name = user.getUsername();
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return name;
	}

	/**
	 * 获取用户总数
	 * @return
	 */
	public static Integer getUserTotal(){
		Integer count = null;
		try{
			Record record = Db.findFirst(String.format("select count(id) as total from %s",tableName));
			if(record != null && record.get("total")!=null){
				count = record.getLong("total").intValue();
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return count;
	}

	/**
	 * 获取用户总数
	 * @return
	 */
	public static Integer getUserTodayTotal(){
		Integer count = null;
		try{
			Record record = Db.findFirst(String.format("select count(id) as total from %s where to_days(addTime)=to_days(now())",tableName));
			if(record != null && record.get("total")!=null){
				count = record.getLong("total").intValue();
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return count;
	}

	/**
	 * 生成新identifier
	 *
	 * @return
	 */
	public static String getNewIdentifier() {
		String identifier = "";
		boolean generated = false;
		Integer id;
		Random random = new Random(new Date().getTime());
		String date = DateUtil.formatDate(new Date(), "yyMM");
		while (!generated) {
			id = random.nextInt(89999) + 10000;

			identifier = date + id.toString();
			User user = dao.findFirst(String.format("select memberId from %s where memberId='%s'", tableName, identifier));
			if (user == null) {
				generated = true;
			} else {
				generated = false;
			}
		}
		return "A"+identifier;
	}

	public String getSexName(){
		return getSex()==null?"未知":(getSex()?"男":"女");
	}

	/**
	 * 获取待入账金额
	 * @return
	 */
	public BigDecimal getWaitMoney(){
		return RechargeOrder.getWaitMoneyByMemberId(getMemberId());
	}

	/**
	 * 判断是否为员工
	 * @return
	 */
	public Boolean isWorker(){
		Worker worker = Worker.getRecordByUsername(getUsername());
		return (worker!=null && worker.getIsActive());
	}
}
