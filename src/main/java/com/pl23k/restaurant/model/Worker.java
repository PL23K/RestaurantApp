package com.pl23k.restaurant.model;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.TableMapping;
import com.pl23k.restaurant.model.base.BaseWorker;
import com.pl23k.restaurant.utils.DESUtil;

import java.math.BigDecimal;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Worker extends BaseWorker<Worker> {
	public static final Worker dao = new Worker().dao();
	public static final String tableName = TableMapping.me().getTable(Worker.class).getName();
	public static int mPageSize = 10;

	/**
	 * 通过ID获取记录
	 * @param id
	 * @return
	 */
	public static Worker getRecordById(Integer id){
		Worker record = null;
		try{
			record = dao.findById(id);
		}catch (Exception e){
			e.printStackTrace();
		}
		return record;
	}

	/**
	 * 获取真实密码
	 * @return
	 */
	public String getTruePassword(){
		String password = null;
		try{
			password = DESUtil.decryStr(getPassword());
		}catch (Exception e){
			e.printStackTrace();
		}
		return password;
	}

	public static Worker getRecordByUsername(String username){
		Worker record = null;
		try{
			record = dao.findFirst(String.format("select * from %s where username=?",tableName),username);
		}catch (Exception e){
			e.printStackTrace();
		}
		return record;
	}

	/**
	 * 获取所在店铺名称
	 * @return
	 */
	public String getShopName(){
		return Shop.getShopNameById(getShopId());
	}

	/**
	 * 通过店铺ID获取员工数量
	 * @param id
	 * @return
	 */
	public static Integer getWorkerCountByShopId(Integer id){
		Integer count = null;
		try{
			Record record = Db.findFirst(String.format("select count(id) as count from %s where shopId=? ",tableName),id);
			if(record!=null && record.get("count")!=null){
				count = record.getLong("count").intValue();
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return count;
	}

	/**
	 * 分页取出记录
	 * @param pageNumber
	 * @return
	 */
	public static Page<Worker> getRecordByPage(int pageNumber){
		Page<Worker> page = null;
		try {
			page = dao.paginate(pageNumber, mPageSize, "select * ", String.format("from %s order by id desc", tableName));
		}catch (Exception e){
			e.printStackTrace();
		}
		return page;
	}

	/**
	 * 分页查询记录列表
	 *
	 * @param pageNumber
	 * @param searchType 1、按用户名搜索 2、按员工姓名 3、店铺ID
	 * @param searchKey
	 * @param startTime
	 * @param endTime
	 * @return
	 */
	public static Page<Worker> searchRecordByPage(Integer pageNumber,Integer searchType, String searchKey, String startTime, String endTime) {
		Page<Worker> page = null;
		try {
			if(pageNumber==null || pageNumber<1) pageNumber=1;
			String where;
			if(searchType == null) searchType = 1;
			if(searchKey == null){
				where = String.format("from %s where id > 0 ", tableName);
			}else{
				if(searchType == 1){
					where = String.format("from %s where username like '%%%s%%' ", tableName, searchKey);
				}else if(searchType == 2){
					where = String.format("from %s where realName like '%%%s%%' ", tableName, searchKey);
				}else if(searchType == 3){
					where = String.format("from %s where shopId=?", tableName, searchKey);
				}else{
					where = String.format("from %s where  id>0 ", tableName);
				}
			}

			if (startTime != null && !startTime.equals("") && endTime != null && !endTime.equals("")) {
				where = String.format("%s and (addTime between '%s' and '%s')", where, startTime.replace('_', '-'), endTime.replace('_', '-'));
			}

			where = String.format("%s order by id desc", where);
			page = dao.paginate(pageNumber, mPageSize, "select * ", where);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return page;
	}

	/**
	 * 获取今日业绩
	 * @return
	 */
	public BigDecimal getTodayAchievement(){
		BigDecimal decimal = BigDecimal.ZERO;
		try{
			Record record = Db.findFirst(String.format("select sum(money) as total from %s where status>1 and  recommendType=2 and recommendId=? and to_days(now())=to_days(addTime)",RechargeOrder.tableName),getId());
			if(record!=null && record.get("total")!=null){
				decimal = record.getBigDecimal("total");
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return decimal;
	}
	/**
	 * 获取今日实到业绩
	 * @return
	 */
	public BigDecimal getTodayAchievementReal(){
		BigDecimal decimal = BigDecimal.ZERO;
		try{
			Record record = Db.findFirst(String.format("select sum(payMoney) as total from %s where  status>1 and  recommendType=2 and recommendId=? and to_days(now())=to_days(addTime)",RechargeOrder.tableName),getId());
			if(record!=null && record.get("total")!=null){
				decimal = record.getBigDecimal("total");
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return decimal;
	}


	/**
	 * 获取总业绩
	 * @return
	 */
	public BigDecimal getTotalAchievement(){
		BigDecimal decimal = BigDecimal.ZERO;
		try{
			Record record = Db.findFirst(String.format("select sum(money) as total from %s where status>1 and recommendType=2 and recommendId=?",
					RechargeOrder.tableName),getId());
			if(record!=null && record.get("total")!=null){
				decimal = record.getBigDecimal("total");
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return decimal;
	}
	/**
	 * 获取总实到业绩
	 * @return
	 */
	public BigDecimal getTotalAchievementReal(){
		BigDecimal decimal = BigDecimal.ZERO;
		try{
			Record record = Db.findFirst(String.format("select sum(payMoney) as total from %s where status>1 and recommendType=2 and recommendId=?",RechargeOrder.tableName),getId());
			if(record!=null && record.get("total")!=null){
				decimal = record.getBigDecimal("total");
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		return decimal;
	}

	public String getSexName(){
		return getSex()==null?"未知":(getSex()?"男":"女");
	}
}
